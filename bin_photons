#!/usr/bin/python

import sys
import argparse
import json
import numpy as np
from photon_tools.bin_photons import bin_photons

parser = argparse.ArgumentParser()
parser.add_argument('-m', '--no-meta', action='store_true',
                    help='disable generation of metadata file')
parser.add_argument('-w', '--bin-width', metavar='TIME', type=float, required=True,
                    help='Width of bins in seconds')
parser.add_argument('input', metavar='INPUT', nargs='?', type=argparse.FileType('r'),
                    help='Input timetag file', default=sys.stdin)
parser.add_argument('output', metavar='OUTPUT', nargs='?', type=argparse.FileType('w'),
                    help='Binned data output', default=sys.stdout)
parser.add_argument('-c', '--clockrate', metavar='RATE',
                    help='Acquisition clockrate (can usually be inferred from metadata)')
args = parser.parse_args()

meta = {}
infile = args.input
outfile = args.output

if infile != sys.stdin:
        mname = infile.name + '.meta'
        try:
                meta = json.load(open(pname))
                clockrate = meta['clockrate']
        except: pass
        outfile = open(infile.name + '.bins', 'w')

# Open input
times = np.memmap(infile, mode='r', dtype='u8')
bin_width = int(bin_time * clockrate)           # bin width in clocks
if bin_width == 0:
        print "Error: Bin width of zero ticks. Is clockrate set properly?"
        exit()
dt = times[-1] - times[0]
nbins = int(dt / bin_width)

# Do binning
bins = bin_photons(times, bin_width)
bins.tofile(outfile)

if outfile != sys.stdout and not args.no_meta:
        out_meta = {
                'bin width': args.bin_width,
                'input name': args.input.name,
                'clockrate': clockrate,
                'input metadata': meta
        }
        mname = outfile.name + '.meta'
        json.dump(out_meta, open(mname, 'w'), indent=2)

