#!/usr/bin/python

import sys
import argparse
import suffix_parse
import json
import numpy as np
from _bin_photons import bin_photons

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--no-params', action='store_true',
                    help='disable generation of parameter file')
parser.add_argument('binwidth', metavar='TIME', type=str,
                    help='Length of bins')
parser.add_argument('input', metavar='INPUT', nargs='?', type=argparse.FileType('r'),
                    help='Input timetag file', default=sys.stdin)
parser.add_argument('output', metavar='OUTPUT', nargs='?', type=argparse.FileType('w'),
                    help='Binned data output', default=sys.stdout)
parser.add_argument('-c', '--clockrate', metavar='RATE',
                    help='Override clockrate (usually specified in parameters file)', default=1)
args = parser.parse_args()
bin_time = suffix_parse.parse(args.binwidth)       # bin width in real time

clockrate = suffix_parse.parse(args.clockrate)
params = {}
infile = args.input
outfile = args.output

if infile != sys.stdin:
        pname = infile.name + '.params'
        try:
                params = json.decode(open(pname))
                clockrate = params['clockrate']
        except: pass
        outfile = open(infile.name + '.bins', 'w')

# Open input
times = np.memmap(infile, mode='r', dtype='u8')
bin_width = int(bin_time * clockrate)           # bin width in clocks
dt = times[-1] - times[0]
nbins = dt / bin_width
npartial = dt % bin_width != 0
# Truncate partial bin
if npartial:
        times = times[:nbins*bin_width]

# Do binning
bins = bin_photons(times, bin_width)
starts = np.arange(times[0], times[0]+(nbins-npartial)*bin_width, bin_width)

# Write output
out = np.core.records.fromarrays((starts, bins), dtype='u8,u2')
out.tofile(outfile)

if args.output != sys.stdout and not args.no_params:
        out_params = {
                'original name': args.input,
                'bin width': args.bin_width,
                'data params': params
        }
        pname = args.output + '.params'
        json.encode(out_params, open(pname, 'w'))

