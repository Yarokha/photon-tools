#!/usr/bin/python

import sys
import argparse
import numpy as np
import suffix_parse
import json

parser = argparse.ArgumentParser()
parser.add_argument('-p', '--no-params',
                    help='disable generation of parameter file')
parser.add_argument('bin-width', metavar='TIME', type=str,
                    help='Length of bins')
parser.add_argument('input', metavar='FILE', type=argparse.FileType('r'),
                    help='Input timetag file', default=sys.stdin)
parser.add_argument('output', metavar='FILE', type=argparse.argparse.FileType('w'),
                    help='Binned data output', default=sys.stdout)
args = parser.parse_args()
bin_time = suffix_parse.parse(args.pop())       # bin width in real time

clockrate = 1
params = {}
infile = None
out_file = None

if args.input:
        infile = open(args.input, 'r')
        pname = args.input + '.params'
        try:
                params = json.decode(open(pname))
                clockrate = params['clockrate']
        except: pass
else:
        infile = sys.stdin

if args.output:
        outfile = args.output
elif infile == sys.stdin:
        outfile = sys.stdout
else:
        args.output = infile.name + '.bins'
        outfile = open(infile.name + '.bins', 'w')

d = np.fromfile(infile, dtype='u8')
bin_width = int(bin_time * clockrate)           # bin width in clocks
max_t = int(np.max(d))
bins = xrange(0, max_t+2*bin_width, bin_width)
counts, edges = np.histogram(d, bins)
out = np.core.records.fromarrays([edges[:-2],counts[:-1]], dtype='u8,u2')
out.tofile(outfile)

if args.output != sys.stdout and not args.no_params:
        params = {
                'original name': args.input,
                'bin width': args.bin_width,
                'data params': params
        }
        pname = args.output + '.params'
        json.encode(params, open(pname, 'w'))

