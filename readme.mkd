# photon-tools - Tools for analysis of single-photon measurement data

`photon-tools` is a collection of tools for the manipulation and
analysis of photon timestamp data, particularly from FRET and FCS
experiments.

## Installation: the five minute version

To install `photon-tools` on Ubuntu,

     $ sudo apt-get install build-essential python python-numpy python-scipy python-matplotlib cython libboost-all-dev
     $ git clone git://github.com/bgamari/photon-tools.git
     $ cd photon-tools
     $ ./install.sh

## Installation: the unabridged version

Many of these utilities are written in Python and generally require Python 2.6
or greater along with numpy. In particular, some optimized modules require
Cython. Utilities capable of producing plots require the matplotlib python
plotting library.

Dependencies include,
 * Gnu make
 * Python >= 2.6
 * Numpy
 * Scipy
 * Matplotlib >= 1.0
 * Cython >= 0.15
 * Boost

The scripts and libraries included in `photon-tools` can be installed
like any distutils package,

     $ sudo ./setup.py install

Note that running scripts within the photon-tools/ root directory will require
that the Cython code is built in-place, due to limitations of Python's module
name resolution scheme. To do this, one must run,

     $ ./setup.py build_ext --inplace


## Installation

To install `photon-tools`, simply run the following,

     $ sudo ./setup.py install
    
## Supported formats

Utilities requiring timestamp data as input accept data in the following formats,

 * Raw 64-bit integer timestamps (read as little endian)
 * Picoquant PT2
 * Goldner FPGA timetagger `.timetag` files
 
In all of these cases, the utilities will attempt to figure out the
period of the timebase (known as the jiffy).

## Tools
### plot-bins

The `plot-bins` utility produces a binned timeseries plot of a photon
timestamp data set. This is useful to quickly visualize the trajectory
of an experiment.  For example, to get a high-level view of the
intensity in a FRET experiment, one might want to plot the binned
intensity over a long duration (say 5 rows of 20 seconds each) with a
bin width of 10 ms,

     $ plot-bins --rows=5 --row-width=20 --bin-width=1e-2 2012-07-26-run_013.timetag
     
This will produce a plot looking like,

![plot-bins output](doc/plot-bins-1.png)

Note that `plot-bins` by default assumes a FRET experiment, taking
channel 0 to be the donor and channel 1 to be the acceptor. This can
be overridden with the `--channel` command
(e.g. `--channel=0=acceptor`).

### fcs-corr

In the case of an FCS experiment, the first task in the analysis
process is generally to compute a correlation function. `photon-tools`
provides the `fcs-corr` tool to conveniently compute and plot a
correlation function from timestamp data.

To compute and plot a correlation function from $\tau$ of 1
microsecond to 1 second (which is the default range, but we will set
it explicitly here for completeness),

     $ fcs-corr --min-lag=1e-6 --max-lag=1 2012-10-26-run_000.timetag
     
This will produce three files: `2012-10-25-run_001.timetag.acorr` (the
auto-correlation of channel a), `2012-10-25-run_001.timetag.bcorr`
(the auto-correlation of channel b), and
`2012-10-25-run_001.timetag.xcorr` (the cross-correlation of channels
a and b). Moreover, if we pass the `--plot` option a plot will be
produced of each of these functions,

![fcs-corr output](doc/fcs-corr-1.png)


