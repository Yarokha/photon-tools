#!/usr/bin/env python3

from photon_tools.io.timetag_parse import get_strobe_events
from photon_tools.io.metadata import get_metadata
from photon_tools.bin_photons import bin_photons
import argparse
from numpy import mean, std, amin, amax, logical_and
from matplotlib import pyplot as pl

parser = argparse.ArgumentParser(description='Plot FRET efficiency historams')
parser.add_argument('file', type=argparse.FileType('r'), help='Time trace file')
parser.add_argument('-s', '--bin-size', metavar='SECONDS', type=float, help='Length of histogram bins (default: 0.002)', default=2e-3)
parser.add_argument('-D', '--donor', metavar='N', type=int, help='Donor channel (zero-based, default: 0)', default=0)
parser.add_argument('-A', '--acceptor', metavar='N', type=int, help='Acceptor channel (zero-based, default: 1)', default=1)
parser.add_argument('-S', '--skip', metavar='N', type=int, help='Skip first N records', default=0)
parser.add_argument('-t', '--time', metavar='SECONDS', type=float, help='Use this much time for analysis', default=None)
parser.add_argument('-c', '--clockrate', metavar='HZ', type=float,
                    help='Clockrate of timetagger (read from .meta file if exists else defaults to 128 MHz)', default=None)
parser.add_argument('-o', '--output', metavar='FILE', type=str, help='Output to named file')
parser.add_argument('-O', '--auto-output', action='store_true',
                    help='Output to file (name automatically generated)')

args = parser.parse_args()

da = get_strobe_events(args.file.name, 1<<(args.acceptor))[args.skip:]
dd = get_strobe_events(args.file.name, 1<<(args.donor))[args.skip:]

if args.clockrate is None:
    meta = get_metadata(args.file.name)
    clockrate = meta['clockrate'] if meta is not None else 128e6
else:
    clockrate = args.clockrate

ba = bin_photons(da['t'], args.bin_size*clockrate)
bd = bin_photons(dd['t'], args.bin_size*clockrate)

# Make sure data are aligned
start_t = max(amin(ba['start_t']), amin(bd['start_t']))
end_t = min(amax(ba['start_t']), amax(bd['start_t']))
if args.time is not None:
    end_t_temp = start_t + clockrate*args.time
    if not end_t_temp > end_t:
        end_t = end_t_temp

ba = ba[logical_and(ba['start_t'] >= start_t, ba['start_t'] < end_t)]
bd = bd[logical_and(bd['start_t'] >= start_t, bd['start_t'] < end_t)]
dt = end_t - start_t

ctot = ba['count'] + bd['count']

def fret_eff(acc_bins, don_bins):
        return 1. * acc_bins['count'] / (don_bins['count']+acc_bins['count'])

pl.figure(figsize=(6,8))
pl.subplots_adjust(hspace=0.6, wspace=0.4, bottom=0.07, right=0.95, top=0.9, left=0.15)

pl.figtext(0.5, 0.96, args.file.name, fontsize='x-large', horizontalalignment='center')
pl.figtext(0.5, 0.92, '$T=%1.1f \/\mathrm{s}, \/\langle N_D \\rangle = %1.1f \/\mathrm{Hz}, \/\langle N_A \\rangle = %1.1f \/\mathrm{Hz}, \/%d \mathrm{ms}$' % 
                (dt/clockrate, 1.*len(dd)/dt*clockrate, 1.*len(da)/dt*clockrate, args.bin_size*1000), horizontalalignment='center')

def plot_bins(ax, bins, color):
        bins = bins[:3000]
        ax.plot(bins['start_t']/clockrate, bins['count'], color=color)
        ax.set_ylim(0, bins['count'].max())
        ax.set_xlabel('Time (sec)')
        ax.set_ylabel('Counts')
        ax.tick_params('x',width='1.5',which='major')
        ax.locator_params('y', nbins=5, integer=True)

def plot_burst_hist(ax, bins, color):
        hist_bins=range(0,bins['count'].max()+1)
        ax.hist(bins['count'], bins=hist_bins, log=True, color=color)
        if len(hist_bins) > 100:
            ax.set_xscale('log')
        ax.set_xlabel('Burst size (photons)')
        ax.set_ylabel('Events')
        ax.tick_params('x',width='1.5',which='major')

plot_bins(pl.subplot(421), bd, 'g')
plot_burst_hist(pl.subplot(422), bd, 'g')
pl.figtext(0.03, 0.832, 'Donor', rotation='vertical', verticalalignment='center', fontsize='x-large', color='g')

plot_bins(pl.subplot(423), ba, 'r')
plot_burst_hist(pl.subplot(424), ba, 'r')
pl.figtext(0.03, 0.61, 'Acceptor', rotation='vertical', verticalalignment='center', fontsize='x-large', color='r')

def plot_fret_eff_hist(ax, thresh):
        t = mean(ctot) + thresh*std(ctot)
        take = ctot > int(t)
        ta, td = ba[take], bd[take]
        ax.locator_params(nbins=4)
        ax.ticklabel_format(axis='y', scilimits=(0,1))
        if len(ta) > 0:
                ax.hist(fret_eff(ta, td), bins=20, histtype='step', range=(0,1))
                ax.set_xlabel('FRET Efficiency')
                ax.set_ylabel('Events')
        ax.text(0.5, 0.8, '$\mu + %d \sigma \/\/(N_\mathrm{tot} > %d \mathrm{/bin})$' % (thresh, t), transform=ax.transAxes, horizontalalignment='center')

plot_fret_eff_hist(pl.subplot(425), 2)
plot_fret_eff_hist(pl.subplot(426), 3)
plot_fret_eff_hist(pl.subplot(427), 4)
plot_fret_eff_hist(pl.subplot(428), 5)

if args.output is not None:
    pl.savefig(args.output)
elif args.auto_output:
    (root,_,_) = args.file.name.rpartition('.')
    pl.savefig('%s-fret.pdf' % root)
else:
    pl.show()
