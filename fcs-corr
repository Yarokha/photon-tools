#!/usr/bin/python

import argparse
from argparse import ArgumentParser

import os.path
from photon_tools.favia import corr, acorr
from photon_tools import read_photons

import numpy as np
import math

try:
    import matplotlib
    matplotlib.use('Agg')
    from matplotlib import pyplot as pl
    mpl_available = True
except:
    mpl_available = False

verbose = False

def split_chunks(x, n):
    l = len(x) / n
    return [ x[i*l:(i+1)*l] - x[i*l] for i in range(n) ]

def correlate_multi(x, y, n=10, **kwargs):
    x_chunks = split_chunks(x, n)
    y_chunks = split_chunks(y, n)
    corrs = np.vstack( corr(xc, yc, **kwargs) for (xc,yc) in zip(x_chunks,y_chunks) )
    g = corr(x, y, **kwargs)['G']
    var = np.var(corrs['G'], axis=0) / n
    return (np.rec.fromarrays([corrs[0]['lag'], g, var], names='lag,G,var'), corrs['G'])
    
def plot_corr(corrs, output=None):
    if not mpl_available:
        raise RuntimeError('Matplotlib import failed, plotting not available')
    pl.clf()
    pl.xscale('log')
    for corr in corrs:
        pl.errorbar(corr['lag'], corr['G'], yerr=np.sqrt(corr['var']), fmt='.')
    pl.axhline(1, color='0.7')
    pl.xlabel('Lag (s)')
    pl.ylabel('Correlation')
    if output is not None:
        pl.savefig(output)
    
parser = ArgumentParser(description='Compute and plot correlation functions of photon timestamps',
                        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('files', metavar='FILE', type=argparse.FileType('r'), nargs='+',
                    help='Input timestamp files')
parser.add_argument('-a', '--a-channel', type=int, default=0,
                    help='Channel to run correlate')
parser.add_argument('-b', '--b-channel', type=int, default=1,
                    help='Channel to run correlate')
parser.add_argument('-E', '--min-lag', type=float, default=1e-7,
                    help='Smallest lag to compute')
parser.add_argument('-L', '--max-lag', type=float, default=1,
                    help='Longest lag to compute')
parser.add_argument('-n', '--nchunks', type=int, default=10,
                    help='Number of chunks to split data into for variance computation')
parser.add_argument('-O', '--output', default='.',
                     help='Output directory')
parser.add_argument('--chunks', action='store_true', help='Produce file containing chunks')
parser.add_argument('--plot-chunks', action='store_true', help='Produce plot showing correlation of each chunk')
parser.add_argument('-f', '--fineness', type=int, default=8,
                    help='Number of lags per octave')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='Produce debugging output')
parser.add_argument('-l', '--label', type=str, default='corr',
                    help='Descriptive label for dataset shown in plot')
parser.add_argument('-j', '--jiffy', type=float, default=None,
                    help='Acquisition timebase period')
parser.add_argument('-s', '--single', action='store_true',
                    help="Produce only cross-correlations of given channels, skipping auto-correlations")
parser.add_argument('-p', '--plot', action='store_true',
                    help='Plot each computed correlation function')
parser.add_argument('-P', '--plot-type', default='png',
                    help='File format of plot output (svg, png, pdf, or ps)')
parser.add_argument('-t', '--start-time', default=None, type=float,
                    help='Start time of usable data (seconds)')
parser.add_argument('-T', '--stop-time', default=None, type=float,
                    help='Stop time of usable data (seconds)')
parser.add_argument('-A', '--afterpulse', default=None, type=argparse.FileType('r'),
                    metavar='FILE',
                    help='Uncorrelated timestamps for afterpulsing correction')
parser.add_argument('--afterpulse-cutoff', default=None,
                    help="Don't apply afterpulsing correction beyond given lag")
args = parser.parse_args()
verbose = args.verbose

correlations = [(args.a_channel, args.a_channel, 'acorr-%d' % args.a_channel),
                (args.b_channel, args.b_channel, 'acorr-%d' % args.b_channel),
                (args.a_channel, args.b_channel, 'xcorr-%d-%d' % (args.a_channel, args.b_channel))
               ]
if args.single:
    correlations = [(args.a_channel, args.b_channel, args.label)]

def get_jiffy(timestamps):
    jiffy = timestamps.jiffy
    if args.jiffy is not None:
        jiffy = args.jiffy
    if jiffy is None:
        jiffy = 1. / 128e6
        print "Couldn't identify jiffy of file. Defaulting to %e s" % jiffy
    return jiffy
    
def afterpulsing_correction(ch):
    """
    Afterpulsing correction as described by,
    
      M. Zhao, L. Jin, B. Chen, et al.
      "Afterpulsing and its correction in fluorescence correlation spectroscopy
      experiments." _Applied Optics_ (2003)
    """
    f = read_photons.open(args.afterpulse.name, ch)
    jiffy = get_jiffy(f)
    kwargs = {
        'jiffy': jiffy,
        'short_grain': args.min_lag,
        'long_lag': args.max_lag,
        'fineness': args.fineness,
    }

    # TODO: Verify compatible jiffy
    uncorr_G = acorr(f.data, **kwargs)
    mean_I = 1. * len(f.data) / (f.data[-1] - f.data[0])
    afterpulse_corr = (uncorr_G['G'] - 1) * mean_I / jiffy
    afterpulse_var = uncorr_G['var'] * (mean_I / jiffy)**2
    cutoff = args.afterpulse_cutoff
    if cutoff is not None:
        afterpulse_corr[uncorr_G['lag'] > cutoff] = 0
        afterpulse_var[uncorr_G['lag'] > cutoff] = 0
    return (afterpulse_corr, afterpulse_var)

if not os.path.isdir(args.output):
    os.makedirs(args.output)
    
for file in args.files:
    for (ac,bc,label) in correlations:
        fname = os.path.basename(file.name)
        output_base = os.path.join(args.output, fname+'.'+label)
        a = read_photons.open(file.name, ac)
        b = read_photons.open(file.name, bc)
        if len(a.data) == 0 or len(b.data) == 0:
            print "No data in one channel, skipping"
            continue
        jiffy = get_jiffy(a)
        if args.jiffy is not None:
            a.jiffy = args.jiffy
            b.jiffy = args.jiffy

        ad,bd = a.data, b.data
        t0 = min(ad[0], bd[0])
        if args.start_time is not None:
            ad = ad[ad - t0 >= args.start_time / jiffy]
            bd = bd[bd - t0 >= args.start_time / jiffy]
        if args.stop_time is not None:
            ad = ad[ad - t0 < args.stop_time / jiffy]
            bd = bd[bd - t0 < args.stop_time / jiffy]

        print label

        print '  %20s, channel %d:' % (fname, ac)
        print '    %d events, %d after filtering' % (len(a.data), len(ad))
        dur = ad[-1] - ad[0]
        print '    duration = %d = %1.2f seconds' % (dur, (dur * a.jiffy))

        print '  %20s, channel %d:' % (fname, bc)
        print '    %d events, %d after filtering' % (len(b.data), len(bd))
        dur = bd[-1] - bd[0]
        print '    duration = %d = %1.2f seconds' % (dur, (dur * b.jiffy))

        kwargs = {
            'jiffy': jiffy,
            'short_grain': args.min_lag,
            'long_lag': args.max_lag,
            'fineness': args.fineness,
            'verbose': args.verbose
        }

        c = None
        if args.nchunks > 1:
            c,chunks = correlate_multi(ad, bd, n=args.nchunks, **kwargs)
            if args.chunks:
                np.savetxt(fname+'.chunks.'+label, np.vstack([c['lag'], chunks]).T)
            if args.plot_chunks:
                plot_corr([np.rec.fromarrays([c['lag'],chunks[i,:],np.zeros(c.shape)],
                                             names='lag,G,var')
                           for i in range(chunks.shape[0])],
                          output_base+'.chunks.'+args.plot_type)
        else:
            c = corr(ad, bd, **kwargs)

        if args.afterpulse is not None:
            if ac != bc:
                print "Can only perform afterpulsing correction on autocorrelations"
            else:
                mu = 1.0 * len(a.data) / (a.data[-1] - a.data[0])
                afterpulse_corr, afterpulse_var = afterpulsing_correction(ac)
                c['G'] -= jiffy / mu * afterpulse_corr
                c['var'] += (jiffy / mu)**2 * afterpulse_var

        print '  G(%1.2e s) = %1.3f' % (c[0]['lag'], c[0]['G'])
        print '  G(%1.2e s) = %1.3f' % (c[-1]['lag'], c[-1]['G'])
        print

        with open(output_base, 'w') as f:
                f.write('# lag            G(tau)            variance\n')
                np.savetxt(f, c)

        if args.plot:
            plot_corr([c], output_base+'.'+args.plot_type)

