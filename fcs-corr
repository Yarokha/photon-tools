#!/usr/bin/python

import argparse
from argparse import ArgumentParser

import os.path
from photon_tools.favia import corr
from photon_tools.read_photons import TimestampFile

import numpy as np
from matplotlib import pyplot as pl
import math

verbose = False

def read_data(file):
    a = TimestampFile(file.name, 0)
    d = TimestampFile(file.name, 1)
    jiffy = a.jiffy
    if jiffy is None:
        jiffy = 1. / 128e6
        print "Couldn't identify jiffy of file. Defaulting to %e s" % jiffy
    return (jiffy, a.data, d.data)

def chunks(x, n):
    l = len(x) / n
    return [ x[i*l:(i+1)*l] for i in range(n) ]

def correlate_multi(x, y, n=10, **kwargs):
    x_chunks = chunks(x, n)
    y_chunks = chunks(y, n)
    print map(len, x_chunks)
    corrs = np.vstack( corr(xc, yc, **kwargs) for (xc,yc) in zip(x_chunks,y_chunks) )
    print np.mean(corrs['G'], axis=1)
    print corrs.shape
    
def plot_corr(corr, output=None):
    pl.clf()
    pl.xscale('log')
    pl.errorbar(corr['lag'], corr['dotnormed'], yerr=corr['bar'], fmt='.')
    pl.xlabel('Lag (s)')
    pl.ylabel('Correlation')
    if output is not None:
	pl.savefig(output)
    
parser = ArgumentParser(description='Compute and plot correlation functions of photon timestamps')
parser.add_argument('files', metavar='FILE', type=argparse.FileType('r'), nargs='+',
                    help='Input timestamp files')
parser.add_argument('-a', '--a-channel', type=int, default=0,
                    help='Channel to run correlate')
parser.add_argument('-b', '--b-channel', type=int, default=1,
                    help='Channel to run correlate')
parser.add_argument('-E', '--min-lag', type=float, default=1e-7,
                    help='Smallest lag to compute')
parser.add_argument('-L', '--max-lag', type=float, default=1,
                    help='Longest lag to compute')
parser.add_argument('-f', '--fineness', type=int, default=8,
                    help='Granularity of lags')
parser.add_argument('-v', '--verbose', action='store_true',
                    help='Produce debugging output')
parser.add_argument('-l', '--label', type=str, default='corr')
parser.add_argument('-s', '--single', action='store_true',
                    help='Only compute the correlation of the given two channels')
parser.add_argument('-p', '--plot', action='store_true',
                    help='Plot each computed correlation function')
parser.add_argument('-t', '--start-time', default=None, type=float,
                    help='Start time of usable data (seconds)')
parser.add_argument('-T', '--stop-time', default=None, type=float,
                    help='Stop time of usable data (seconds)')
args = parser.parse_args()
verbose = args.verbose

correlations = [(args.a_channel, args.a_channel, 'acorr-%d' % args.a_channel),
                (args.b_channel, args.b_channel, 'acorr-%d' % args.b_channel),
                (args.a_channel, args.b_channel, 'xcorr-%d-%d' % (args.a_channel, args.b_channel))
               ]
if args.single:
    correlations = [(args.a_channel, args.b_channel, args.label)]

for file in args.files:
    for (ac,bc,label) in correlations:
        a = TimestampFile(file.name, ac)
        b = TimestampFile(file.name, bc)
        jiffy = a.jiffy
        if jiffy is None:
            jiffy = 1. / 128e6
            print "Couldn't identify jiffy of file. Defaulting to %e s" % jiffy

        fname = os.path.basename(file.name)
        print label
        print '  %20s, channel %d: %d events' % (fname, bc, len(a.data))
        print '  %20s, channel %d: %d events' % (fname, ac, len(b.data))

        ad,bd = a.data, b.data
        if args.start_time is not None:
            ad = ad[ad >= args.start_time / jiffy]
            bd = bd[bd >= args.start_time / jiffy]
        if args.stop_time is not None:
            ad = ad[ad < args.stop_time / jiffy]
            bd = bd[bd < args.stop_time / jiffy]
        
        c = corr(ad, bd,
                 jiffy=jiffy,
                 short_grain=args.min_lag, long_lag=args.max_lag,
                 fineness=args.fineness, verbose=args.verbose)

        print '  G(%1.2e s) = %1.3f' % (c[0]['lag'], c[0]['dotnormed'])
        print '  G(%1.2e s) = %1.3f' % (c[-1]['lag'], c[-1]['dotnormed'])
        print

        np.savetxt(fname+'.'+label, c)
        if args.plot:
            plot_corr(c, fname+'.'+label+'.png')
