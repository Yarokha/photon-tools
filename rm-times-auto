#!/usr/bin/python

import sys
from matplotlib import pyplot as pl
import numpy as np


if len(sys.argv) < 4 or '-h' in sys.argv or '--help' in sys.argv:
        print "Usage: %s [input-file] [bin size] [threshold]" % sys.argv[0]
        print 
        print "Utility to remove a range of times from a timestamp file."
        print "This will cut out all bins in which the number of photons is higher than the threshold"
	print "files with data should be named input-file.ch0.times and input-file.ch1.times"
	print "The bin size is given in milliseconds"
	print "The threshold is given in multiples of the average. 2 means cut data twice as high as the average"
        sys.exit(0)

jiffy = 4e-12
times_one = np.fromfile(sys.argv[1] + '.ch0.times', np.uint64)
times_two = np.fromfile(sys.argv[1] + '.ch1.times', np.uint64)

first_time = min(times_one[0], times_two[0])
last_time = max(times_one[-1], times_two[-1])

jiffy_bin_size = float(sys.argv[2]) / 1000.0 / jiffy

threshold = float(sys.argv[3])

if (last_time < first_time):
	print "Overflow detected: reprogram rm-times-auto to handle this"
	sys.exit(0)

bin_count = (last_time - first_time) / jiffy_bin_size

bins = np.arange(first_time, last_time, jiffy_bin_size)

pdf, bins, patches = pl.hist(times_one, bins = bins)

average_bin_count = float(sum(pdf) / bin_count)

bins_to_remove_one = set()

for index, item in enumerate(pdf):
	if(item > (average_bin_count * threshold)):
		bins_to_remove_one.add(index)

pl.clf()

pdf, bins, patches = pl.hist(times_two, bins = bins)

average_bin_count = float(sum(pdf) / bin_count)

bins_to_remove_two = set()

for index, item in enumerate(pdf):
	if(item > (average_bin_count * threshold)):
		bins_to_remove_two.add(index)

bins_to_remove = sorted(set.union(bins_to_remove_one, bins_to_remove_two))

bins_to_remove.reverse()

for item in bins_to_remove:
	start = bins[item]
	end = start + bins[1] - bins[0]

	take_one = np.nonzero((times_one < start) | (times_one > end))
	take_two = np.nonzero((times_two < start) | (times_two > end))

	times_one = times_one[take_one]
	times_two = times_two[take_two]

	# Subtract offset
	times_one[np.nonzero(times_one > end)] -= end - start
	times_two[np.nonzero(times_two > end)] -= end - start

times_one.tofile(sys.argv[1] + '.ch0.times.new')
times_two.tofile(sys.argv[1] + '.ch1.times.new')

