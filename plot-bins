#!/usr/bin/python

import argparse
from collections import namedtuple

import numpy as np
from matplotlib import pyplot as pl
from matplotlib.ticker import MaxNLocator

from photon_tools.read_photons import TimestampFile
import photon_tools.bin_photons as bp

colors = 'rgb'

description = 'Utility to plot a binned series of timestamps'
parser = argparse.ArgumentParser(description=description)
parser.add_argument('input', metavar='FILE', type=argparse.FileType('r'),
                    nargs='+', help='Input timestamp data')
parser.add_argument('-w', '--bin-width', metavar='TIME', type=float, default=10e-3,
		    help='Bin width in seconds')
parser.add_argument('-r', '--rows', metavar='N', type=int, default=10,
		    help='Number of plot rows')
parser.add_argument('-j', '--jiffy', metavar='TIME', type=float, default=None,
		    help='Instrument tick period')
parser.add_argument('-W', '--row-width', metavar='TIME', type=float, default=10,
		    help='Width of row in seconds')
parser.add_argument('-y', '--max-count', metavar='COUNT|max|avg', default='max',
		    help='Maximum count rate of Y axis')
parser.add_argument('-o', '--output', metavar='FILE', type=argparse.FileType('w'), default=None,
		    help='Output to named file')
parser.add_argument('-c', '--channel', metavar='CHANNEL[=LABEL],...',
                    action='append', default=[],
                    help='Channels to plot')
parser.add_argument('-O', '--auto-output', action='store_true',
		    help='Output to file (name automatically generated)')
args = parser.parse_args()
bin_width = args.bin_width # seconds
if len(args.channel) == 0:
        args.channel = ['1=acceptor', '0=donor']

def process(fname):
    DataSet = namedtuple('DataSet', 'data,label')
    channels = []
    jiffy = None
    for c in args.channel:
            try:
                chan,_,label = c.partition('=')
                chan = int(chan)
                if len(label) == 0:
                        label = 'Channel %d' % chan
                t = TimestampFile(fname, chan)
                if jiffy is None:
                        jiffy = t.jiffy
                channels.append(DataSet(t.data, label))
            except:
                pass

    if len(channels) == 0:
            raise RuntimeError("No channels given")

    if jiffy is None:
            raise RuntimeError("Couldn't identify jiffy")

    start_t = min(map(lambda c: c.data[0], channels))
    bin_width_j = round(bin_width / jiffy)
    bins = map(lambda c: bp.bin_photons(c.data, bin_width_j, start_t), channels)

    print fname
    print "Average rates:"
    for c in channels:
            dur = c.data[-1] - c.data[0]
            print "  %20s:    %f / second" % (c.label, len(c.data) / dur / jiffy)
    print

    ymax = None
    if args.max_count == 'max':
            ymax = max(map(lambda c: np.max(c['count']), bins))
    elif args.max_count == 'avg':
            ymax = 1.5 * max(map(lambda c: np.mean(c['count']), bins))
    else:
            ymax = float(args.max_count) * bin_width

    for r in range(args.rows):
            pl.subplot(args.rows,1,r+1)
            s = r * args.row_width + start_t*jiffy
            e = (r+1) * args.row_width + start_t*jiffy
            for color,chan,b in zip(colors,channels,bins):
                ab = b[np.logical_and(b['start_t'] >= s/jiffy, b['start_t'] < e/jiffy)]
                pl.plot(ab['start_t']*jiffy, ab['count'],
                        '-', c=color, label=chan.label, alpha=0.7)

            ax = pl.gca()
            ax.xaxis.set_visible(False)
            ax.yaxis.set_major_locator(MaxNLocator(2))
            ax.yaxis.set_minor_locator(MaxNLocator(4))
            ax.yaxis.grid(which='minor', alpha=0.2, color='black', linestyle='-')
            pl.xlim(s, e)
            pl.ylim(0, ymax)

    pl.gca().axes.get_xaxis().set_visible(True)

    pl.suptitle(fname + '\nBin Width=%1.1f ms' % (bin_width*1e3))
    pl.xlabel('Time (seconds)')

    if args.output is not None:
            pl.savefig(args.output.name)
    elif args.auto_output:
            (root,_,_) = fname.rpartition('.')
            pl.savefig('%s-bins.pdf' % root)
    else:
            pl.show()

for f in args.input:
    pl.clf()
    process(f.name)

