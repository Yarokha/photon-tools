#!/usr/bin/python
# vim: set fileencoding=utf-8

# fcs-tools - Tools for FCS data analysis
#
# Copyright Â© 2010 Ben Gamari
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see http://www.gnu.org/licenses/ .
#
# Author: Ben Gamari <bgamari@physics.umass.edu>
#

import sys 
import numpy as np
from numpy import min, max, mean, exp, power, sqrt, log10, sum
from photon_tools import suffix_parse
from photon_tools import read_photons
from photon_tools import favia
from photon_tools.model_fit import models, Parameters, fit, plot_model
from photon_tools import fcs_models

"""
fcs-fit: Multiple-curve non-linear regression framework for fitting of FCS
correlation functions

This is a framework for "global" analysis of FCS correlation functions.
"""

def load_corr(file):
        dt = [('lag','f'), ('G','f'), ('var','f')]
        usecols = None
        lines = [l for l in open(file.name).readlines() if not l.startswith('#')]
        ncols = len(lines[0].split())
        if ncols == 5:
            # favia format
            usecols = (0,3,4)
        elif ncols == 3:
            usecols = None
        else:
            raise RuntimeError('Unrecognized file format')

        d = np.genfromtxt(file, dtype=dt, usecols=usecols)
        d['G'] -= 1.0   # Subtract out offset
        return d

def parse_param_value(value):
        a = value.split(',')
        if len(a) == 1:
                return suffix_parse.parse(value)
        elif len(a) == len(params.curves):
                return [suffix_parse.parse(v) for v in a]
        else:
                raise RuntimeError('Not enough values (expected %d)' % len(params.curves))

import cmd
class ParamEditor(cmd.Cmd):
        def __init__(self, params):
                self.params = params
                cmd.Cmd.__init__(self)

        def do_scope(self, line):
                """ Sets the scope of a parameter """
                name, scope = line.split()
                name = name.strip()
                if name not in self.params:
                        print 'Invalid parameter %s' % name
                        return
                if scope not in ['fitted', 'fixed']:
                        print 'Invalid scope %s' % scope
                        return
                self.params[name].scope = scope
                
        def do_initial(self, line):
                """ Sets the initial value of a parameter """
                name, value = line.split()
                name = name.strip()
                if name not in self.params:
                        print 'Invalid parameter %s' % name
                        return
                try:
                        self.params[name].value = parse_param_value(value)
                except:
                        print 'Invalid value %s' % value

        def do_list(self, line):
                """ Describe known parameters """
                print 'Known Parameters:'
                print '================='
                print '      name\tdefault scope\tdefault value\tdescription'
                for p in self.params.values():
                        print '    %6s\t%13s\t%13s %-5s\t%s' % \
                            (p.name, p.def_scope, p.def_value, p.unit, p.description)
                print

        def do_done(self, line):
                """ Finished editing parameters """
                return True

        def do_help(self, line):
                """ Help """
                print """
Commands:
============
scope [param] fixed|fitted
    Set the scope of a parameter
initial [param] [value]
    Set the initial value of a parameter
done
    Stop modifying parameters
"""

        def postcmd(self, stop, line):
                print 'Parameters:'
                print_parameters(self.params)
                return stop

        def preloop(self):
                print 'Parameters:'
                print_parameters(self.params)

def print_parameters(params):
        for p in params.values():
                v = '%1.3e' % p.value if p.value is not None else 'not set'
                print '%15s  (%-6s)   =   %10s %-5s        %s' % \
                    (p.name, p.scope, v, p.unit, p.description)

def print_models():
        print 'Known models:'
        for k,m in models.items():
                print '  %s : %s' % (k, m.__doc__)
                print '     Parameters:'
                print '     ==========='
                print '          name\tdefault scope\tdefault value\tdescription'
                for p in m.params:
                        print '    %10s\t%13s\t%13s %-5s\t%s' % \
                            (p.name, p.def_scope, p.def_value, p.unit, p.description)
                print

def apply_params(params, param_exprs):
        for s in param_exprs:
                scope, p, v = None, None, None
                if ':' not in s:
                    p = s
                else:
                    scope,p = s.split(':')
                    if scope.startswith('fit'):
                            scope = 'fitted'
                    elif scope.startswith('fix'):
                            scope = 'fixed'
                    else:
                            parser.error('Invalid scope %s' % scope)

                if '=' in p:
                    p,v = p.split('=')

                if p not in params:
                        parser.error('Unknown parameters %s' % p)
                if v is not None: params[p].value = parse_param_value(v)
                if scope is not None: params[p].scope = scope
        return params
        
if __name__ == '__main__':
        import argparse
        parser = argparse.ArgumentParser(
                description='Fit FCS correlation functions',
                formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        parser.add_argument('-e', '--early-cutoff', metavar='LAG', type=float, default=0,
                            help='Early lag cutoff time')
        parser.add_argument('-n', '--no-fit', action='store_true',
                            help="Don't attempt to fit data; to be used with --plot")
        parser.add_argument('-p', '--plot', action='store_true',
                            help='Produce plot of data and fits')
        parser.add_argument('-o', '--output', metavar='[FILE]', nargs='?', const='AUTO',
                            help='Save plot to FILE (defaulting to input filename+.png')
        parser.add_argument('-m', '--model', metavar='MODEL', default='3d_diff',
                            help='Specify a fit function to use (options: %s)' % ', '.join(models.keys()))
        parser.add_argument('-E', '--edit', action='store_true',
                            help='Start command-line parameters editor')
        parser.add_argument('-s', '--set', metavar='SCOPE:PARAM=VALUE', action='append', dest='params',
                            help='Set an initial fit parameter')
        parser.add_argument('-f', '--file', metavar='FILE', dest='params_file',
                            help='Specify parameters file for initial fit parameters')
        parser.add_argument('--with-uncertainty', action='store_true',
                            help='Show estimated standard deviation as errorbars on residuals')
        parser.add_argument('-v', '--verbose', action='store_true',
                            help='Enable verbose output')
        parser.add_argument('curves', metavar='FILE', nargs='+', type=argparse.FileType('r'),
                            help='Correlation functions to plot')
        args = parser.parse_args()

        curves = []
        for f in args.curves:
                datum = load_corr(f)
                taken = datum[datum['lag'] > args.early_cutoff]
                curves.append(taken)

        if args.model == 'help':
                print_models()
                sys.exit(0)
        elif args.model not in models:
                parser.error('Error: Unknown fitting model "%s"' % args.model)

        model = models[args.model]()
        params = Parameters(model, curves)
        print 'Fitting %d curves against model %s' % (len(curves), args.model)

        # Parse params from file
        if args.params_file is not None:
                params = apply_params(params, open(args.params_file).readlines())

        # Parse parameters from arguments
        if args.params is not None:
                params = apply_params(params, args.params)

        if args.edit:
                c = ParamEditor(params)
                while True:
                        c.cmdloop()
                        unset_params = [ k for k,v in params.items() if v.value is None ]
                        if len(unset_params) == 0:
                                break
                        else:
                                print "There are still unset parameters: ", ', '.join(unset_params)
        else:
                unset_params = [ k for k,v in params.items() if v.value is None ]
                if len(unset_params) > 0:
                        parser.error('Error: Unset parameters: ' + ', '.join(unset_params))

        print
        print 'Initial parameters:'
        print_parameters(params)
        print

        new = params
        try:
                new, cov_x = fit(curves, model, params, epsfcn=1e-10, verbose=args.verbose)
        except RuntimeError as e:
                print 'Fit failed to converge: ', e
                sys.exit(1)

        print 'Covariance:'
        print ' '*8 + '      '.join('%-9s ' % name for name in new._fitted)
        print ' '*8 + '      '.join('='*10 for name in new._fitted)
        for var,cov in zip(new._fitted, cov_x):
                print '%6s ' % var,
                print '    '.join('%+1.2e   ' % x for x in cov)
        print
        
        print
        print 'Fitted parameters:'
        print_parameters(new)
        print

        print 'Goodness of fit:'
        for i,c in enumerate(curves):
                d = params.curves[i]
                err = model(params._curve_params(i), d['lag']) - d['G']
                chi_sq = sum(err**2 / d['var'])
                # This isn't quite right, number of parameters could be smaller
                dof = len(curves[i]) - len(params)
                print '  ', args.curves[i].name
                print '    Chi^2 = %1.2e' % chi_sq
                print '    DoF   = %3d' % dof
                print '    Chi^2 / DoF = %1.2f' % (chi_sq / dof)

        # Plot
        if args.output == 'AUTO':
                args.output = args.curves[0].name+'.png'

        if args.plot:
                from matplotlib import pyplot as pl
                fig = pl.figure()
                ax = fig.add_subplot(111)
                
                for curve,name in zip(curves, args.curves):
                        ax.semilogx(curve['lag'], curve['G'], label=name.name,
                                    linestyle='None', marker='+')

                if not args.no_fit:
                        fig.subplots_adjust(right=0.7, left=0.1)
                        plot_model(fig, ax, new, model, args.curves,
                                   with_uncertainty=args.with_uncertainty)

                ax.set_xlabel(r'$\tau$')
                ax.set_ylabel(r'$G$')
                ax.autoscale_view(tight=True, scalex=True)
                leg = ax.legend()
                for t in leg.get_texts():
                        t.set_fontsize('small')

                if args.output is not None:
                        fig.savefig(args.output)
                        print 'saved to', args.output
                else:
                        pl.show()
                
